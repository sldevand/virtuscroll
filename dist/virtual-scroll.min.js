import VirtualScrollRow from "./virtual-scroll-row.min.js"; class VirtualScroll extends HTMLElement { constructor() { super(), this.root = this.attachShadow({ mode: "open" }), this.wrapper = document.createElement("div"), this.data = [], this.rowHeight, this.totalContentHeight, this.viewportHeight = 300 } connectedCallback() { this.root.appendChild(this.wrapper) } setViewportHeight(t) { this.viewportHeight = t } setData(t) { this.data = t, this.render() } clear() { Array.from(this.wrapper.children).forEach((t => t.remove())) } render(t = 0) { if (this.clear(), !this.data.length) { let t = document.createElement("div"); return t.innerHTML = "<span>Nothing found</span>", void this.wrapper.appendChild(t) } this.rowHeight || (this.rowHeight = this.getRowHeight(), this.totalContentHeight = this.data.length * this.rowHeight); let e = Math.floor(t / this.rowHeight) - 1; e = Math.max(0, e); const i = e * this.rowHeight; this.root.innerHTML = `\n        <style>\n            :host {\n                height: ${this.totalContentHeight}px;\n                transform:translateY(${i}px);\n            }\n        </style>`; let r = Math.ceil(this.viewportHeight / this.rowHeight) + 2; this.data.slice(e, e + r).forEach((t => { let e = new VirtualScrollRow(t); this.wrapper.appendChild(e) })), this.root.appendChild(this.wrapper) } getRowHeight() { let t = this.data[1], e = new VirtualScrollRow(t); this.wrapper.appendChild(e); let i = this.wrapper.offsetHeight; return this.clear(), i } } customElements.define("virtual-scroll", VirtualScroll);